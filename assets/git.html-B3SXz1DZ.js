import{_ as a,c as i,a as s,o as n}from"./app-vP2RG-Zh.js";const l={};function t(r,e){return n(),i("div",null,e[0]||(e[0]=[s(`<h1 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范"><span>Git 规范</span></a></h1><h2 id="git-message-规范" tabindex="-1"><a class="header-anchor" href="#git-message-规范"><span>git message 规范</span></a></h2><h3 id="_1-1-前言" tabindex="-1"><a class="header-anchor" href="#_1-1-前言"><span>1.1 前言</span></a></h3><p>为什么需要Git <code>message</code> 规范</p><ol><li>更方便、快捷地浏览和了解项目的历史信息</li><li>有利于保证提交内容的独立性，避免把所有改动都放在一个提交里面</li><li>便于通过脚本自动化生成 <code>CHANGELOG</code></li></ol><h3 id="_1-2-git-message-的组成" tabindex="-1"><a class="header-anchor" href="#_1-2-git-message-的组成"><span>1.2 Git message 的组成</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;type&gt;[optional scope]: &lt;subject&gt;</span>
<span class="line"></span>
<span class="line">[optional body]</span>
<span class="line"></span>
<span class="line">[optional footer(s)]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>message header</code>（即首行）必选，scope、body 和 footer 可选。</p><h4 id="_1-2-1-字数限制" tabindex="-1"><a class="header-anchor" href="#_1-2-1-字数限制"><span>1.2.1 字数限制</span></a></h4><ul><li>header： 只有一行不超过50个字符</li><li>body： 每行不超过 72 个字符</li><li>footer： 每行不超过 72 个字符</li></ul><blockquote><p>为什么又字数限制？</p><ul><li>header： 像 Linux、Git 这样的开源项目，是以邮件列表作为代码评审的平台，header 要作为邮件的标题，而邮件标题本身就有长度的限制，并且标题太长也不利于浏览和信息获取。</li><li>body 和 footer：源于大部分编程语言的编码规范，最初源于打字机宽度等物理设备的限制，后来慢慢成为默认遵守的规范。</li></ul></blockquote><h3 id="_1-3-message-header-规范" tabindex="-1"><a class="header-anchor" href="#_1-3-message-header-规范"><span>1.3 <code>message header</code> 规范</span></a></h3><h4 id="_1-3-1-type" tabindex="-1"><a class="header-anchor" href="#_1-3-1-type"><span>1.3.1 type</span></a></h4><p><code>type</code>: 可选范围</p><ul><li><code>feat</code>: 新增功能</li><li><code>fix</code>: 修复 bug</li><li><code>docs</code>: 文档相关的改动</li><li><code>style</code>: 对代码格式化的改动,代码逻辑并未发生变动（比如删除分号之类的）</li><li><code>test</code>: 测试用例相关</li><li><code>chore</code>: 项目工程方面的改动，代码逻辑并未发生变化</li><li><code>revert</code>: 恢复代码之前的提交</li><li><code>refactor</code>: 重构或优化</li></ul><blockquote><p>注意</p><p><code>css</code> 相关修改 并不是使用的 <code>style</code> 而是使用的 <code>feat</code> 和 <code>fix</code></p></blockquote><h4 id="_1-3-2-scope" tabindex="-1"><a class="header-anchor" href="#_1-3-2-scope"><span>1.3.2 scope</span></a></h4><p><code>scope</code> 描述本次改动的功能模块，视具体模块来确定</p><p>在lerna 多项目的情况下，<code>scope</code> 可以取值<code>commitlint-config</code>、<code>eslint-config</code>等</p><h4 id="_1-3-3-subject" tabindex="-1"><a class="header-anchor" href="#_1-3-3-subject"><span>1.3.3 subject</span></a></h4><p>subject 用来描述本次改动的内容，需要注意的点：</p><ol><li><p>时态方面使用一般现在时，不要使用过去时。虽然查看 <code>message</code> 时，<code>message</code> 内容本身都发生在过去，然而对于主题来说，使用现在时的时态更简洁明确，并且更易达成一致性：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> // good</span>
<span class="line"> docs: delete redundant docs</span>
<span class="line"></span>
<span class="line"> // bad</span>
<span class="line"> docs: deleted redundant docs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>句式使用祈使句。即一般情况不要增加主语。因为在绝大情况下，主语都是作者『我』：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> // good</span>
<span class="line"> docs: delete redundant docs</span>
<span class="line"></span>
<span class="line"> // bad</span>
<span class="line"> docs: i delete redundant docs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>句首无需大写，句尾无需结束标点。因为主题（或标题）本身不用形成完整的句子：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> // good</span>
<span class="line"> docs: delete redundant docs</span>
<span class="line"></span>
<span class="line"> // bad</span>
<span class="line"> docs: Delete redundant docs.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="git-footer-常用场景" tabindex="-1"><a class="header-anchor" href="#git-footer-常用场景"><span>git footer 常用场景</span></a></h3><ol><li>当前场景是破坏性改动 <code>BREAKING CHANGE</code></li><li>引用相关的 issue 或 pull request: <code>Close fix Resolve</code></li></ol><h2 id="_2-git-分支-规范" tabindex="-1"><a class="header-anchor" href="#_2-git-分支-规范"><span>2. git 分支 规范</span></a></h2><p>目前互联网和社区中流传最广泛的一个分支模型 <a href="https://github.com/nvie/gitflow" target="_blank" rel="noopener noreferrer">Git Flow</a> 出自 <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener noreferrer">a-successful-git-branching-model</a> 这篇十年前的文章，文章作者 Vincent Driessen 在 2020 年三月份的时候已经公开表示，该分支模型已经不适用于现如今持续交付的软件工程方式，推荐在持续交付的软件工程中使用更简单的 <a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener noreferrer">Github Flow</a> 模型。</p><h3 id="_2-1-新建分支规范" tabindex="-1"><a class="header-anchor" href="#_2-1-新建分支规范"><span>2.1 新建分支规范</span></a></h3><p>推荐{type}/{需求号｜功能模块}-name-date</p><ul><li>type: 1.3.1 所述的type</li><li>需求号｜功能模块： 确定你要做的内容</li><li>name： 开发者名称 可选</li><li>date： 日期</li></ul><h2 id="git-tag-命名规范" tabindex="-1"><a class="header-anchor" href="#git-tag-命名规范"><span>Git tag 命名规范</span></a></h2><p><code>Git tag</code> 就是通过语义化的名称来给仓库标注一个个具体的节点。与此同时还可以根据标签名称来大致了解当前项目的兼容性和迭代情况。</p><p>命名格式为 <code>v{semver}</code>，<code>semver</code> 是遵循 <a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener noreferrer">semantic version</a> 的版本号，例如 <code>v1.2.3</code>。</p><p>相比于使用例如 <code>git tag v1.2.3</code> 这种「轻量标签」，更推荐使用如下命令生成「附注标签」：</p><p><code>git tag -a v1.2.3 -m &quot;发布经销商管理模块&quot;</code></p><h2 id="推荐工具" tabindex="-1"><a class="header-anchor" href="#推荐工具"><span>推荐工具</span></a></h2><ol><li>cz-git 使用交互式操作生成规范化的commitMsg 具体安装：<a href="https://cz-git.qbb.sh/zh/guide/" target="_blank" rel="noopener noreferrer">详细教程</a></li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">AngularJS 代码贡献指南</a></li><li><a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.j8e4paqkfz0q" target="_blank" rel="noopener noreferrer">AngularJS Git Commit Message Conventions</a></li><li><a href="http://karma-runner.github.io/0.13/dev/git-commit-msg.html" target="_blank" rel="noopener noreferrer">Karma 的 Git 日志规范</a></li><li><a href="http://stackoverflow.com/questions/3580013/should-i-use-past-or-present-tense-in-git-commit-messages" target="_blank" rel="noopener noreferrer">StackOverflow - 在 Git 日志中我该用过去时态还是现在时态？</a></li><li><a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener noreferrer">一个成功的 Git 分支模型</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener noreferrer">Git 基础打标签</a></li><li><a href="https://en.wikipedia.org/wiki/Characters_per_line" target="_blank" rel="noopener noreferrer">每行字符数</a></li><li><a href="https://www.conventionalcommits.org" target="_blank" rel="noopener noreferrer">Conventional Commits</a></li></ol>`,38)]))}const d=a(l,[["render",t],["__file","git.html.vue"]]),c=JSON.parse('{"path":"/engineer/git.html","title":"Git 规范","lang":"zh-cn","frontmatter":{},"headers":[{"level":2,"title":"git message 规范","slug":"git-message-规范","link":"#git-message-规范","children":[{"level":3,"title":"1.1 前言","slug":"_1-1-前言","link":"#_1-1-前言","children":[]},{"level":3,"title":"1.2 Git message 的组成","slug":"_1-2-git-message-的组成","link":"#_1-2-git-message-的组成","children":[]},{"level":3,"title":"1.3 message header 规范","slug":"_1-3-message-header-规范","link":"#_1-3-message-header-规范","children":[]},{"level":3,"title":"git footer 常用场景","slug":"git-footer-常用场景","link":"#git-footer-常用场景","children":[]}]},{"level":2,"title":"2. git 分支 规范","slug":"_2-git-分支-规范","link":"#_2-git-分支-规范","children":[{"level":3,"title":"2.1 新建分支规范","slug":"_2-1-新建分支规范","link":"#_2-1-新建分支规范","children":[]}]},{"level":2,"title":"Git tag 命名规范","slug":"git-tag-命名规范","link":"#git-tag-命名规范","children":[]},{"level":2,"title":"推荐工具","slug":"推荐工具","link":"#推荐工具","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1730360880000,"contributors":[{"name":"bxf","email":"xybaoxiangfei@163.com","commits":1}]},"filePathRelative":"engineer/git.md"}');export{d as comp,c as data};
